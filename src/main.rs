use std::time::Duration;
use std::time::Instant;
use std::fs::File;
use std::collections::{HashMap, HashSet};
use std::env;
use crate::generate_sorted_fastq_new_version::{filter_minimizers_by_quality, Minimizer};


mod file_actions;
mod generate_sorted_fastq_for_cluster;
mod generate_sorted_fastq_new_version;
mod clustering;





fn test_minimizer_gens(){
    //let input = "ATGCTAGCATGCTAGCATGCTAGC";
    let input ="GCTTCAGCTCGCCGCCGCGCTTCGGCCGCGGCCGAGCGGGCGGGAAGGGATCTCTCTAGGAGCTGACACTCGAACCTTCACGACCCATTCGGATTTTT";
    //let input = "GCTTCAGCTCGCCGCCGCGCTTCGGCCGCGGCCGAGCGGGCGGGAAGGGATCTCTCTAGGAGCTGACACTCGAACCTTCACGACCCATTCGGATTTTTCCAGGACTCAGGAGTGGCACTGGGAAGAAGGGGACCGCTTCTGCAATTGGCCTCGACACTGGCTGCCAAGAAGACCTGTCGCCTTTGTTTTTAAGTCTCCAGAAATGGAAGAAGAAGCGAAGTCAGTTGAAGTCACGAGAAATCAGCGAGGCATTTGAAGGCGCTTCCTGAAAACCTTTATTCCCTGGCACGTTGTCTGTTTCAACAGCCCTGCCCCTCCTCGGAGCCTGCTTGTGGAATTCTTCCCCTTCGGGTGTGTGGTGGCATTCCCGCCACGTCCAATGTGGACTCCAAAGATTTGTCCCTTCTTTGTCATTTGAAATGAAATGATGGCCACCGCGTCGGACTGGTCTGTCTGAGGGAGATGGTGACAAGCTCAAGGCCTGCGAGGAAAACAAAGAAACCGCTTGGAACCAATGGATACCATTTTGTTAAGCAAGTTAAAGAGGAGGACCTGCTTTTGAAGCTGGATTATGTACAGGTGACCGAATTATAAAAGTCATGGAGAAAGTGTTATTGGCAAAACCTATTCCCAAGTAATTGCTTTAATTCAAACAGTGATACAACATTGGAACTTAGTGTTATGCCAAAAGATGAAGACATTCTCCAAGTGGCATATTCTCAAGATGCCTACCTGAAAGGCAACGAAGCTTATAGCGGCAATGCCCGCAATATACCTGAACCTCCACCAATCTGCTATCCTGGCTGCCATCTGCCCCATCAGCCATGGCACAGCCAGTTGAAATATCTCCTCCTGACTCATCATTGAGCAAACAGCAAACCAGTACACCAGTACTGACACAACCTGGTAGGGCCTATAGAATGGAAATACAAATGCCTCCATCACCAACAGATGTTGCAAATTCAAACACAGCAGTGTGTGTTTGCAATGAAAGTGTAAGGACTGTCATTGTGCCTTCTGAGAAGGTTGTAGATTTGTTATCCAATAGAAACAACCATACAGGTCCTTCACATAGAACTGAAGAAGTGAGGTATGGCGTGAGTGAGAGCAGACCTCTTTAAAAACAGTGTCAAGAACCACATCACCACCATTATCAATTCCCACCACTCATCTAATTCATCAGCCTGCAGGCTCCAGATCACTGGAACCTTCTGGAATTTTACTTAAGTCTGGAAATTACAGTGGACATTCTGATGGAATCTCAAGCAGCAGATCTCAAGCTGTGGAGGCTCCCTCTGTATCTGTTAATCACTATTCGCCAAATTCCCATCAGCACATAGACTGGAAAAACTATAAAACTTACAAAGAGTATATTGATAACAGACGATTGCACATAGGTTGTCGGACAATACAAGAAAGATTAGATAGTTTAAGAGCAGCATCTCAAAGCACGACAGATTATAACCAGTCGTCCCCAACCGCACTACTTTGCAGGGACGACGTCGAAGCACCTCTCATGATCGAGTGCCCAGTCTGTCCAGATACGGCAACGCAGTGTGTCCCAAGAAAGACTGGAAGATTCTGTGCTAATGAAGTATTGTCCAAGAAGTGCATCTCAAGGAGCACTGACGTCTCCATCTGTTAGTTTTAGTAATCATAGAACTCGTTCATGGGATTATATTGAGGGACAGGATGAAACCTTAGAAAATGTCAATTCTGGAACCCAATACCTGATTCCAATGGAGAGAAAAAACAGACTTACAAGTGGAGTGGGTTTACTGAACAGGATGATAGACGAGGTATTTGTGAAAGACCTAGGCAGCAAGAAATTCATAAATCTTTTCGAGGTTCCAATTTTACTGTGGCTCCAAGCGTTGTTAATTCTGATAACAGGCGAATGAGTGGTAGAGGAGTGGGATCTGTGTCGCAGTTTAAAAAAATTCCACCAGATCTAAAAACATTGCAGTCAAACAGAAATTTTCAGACTACTTGTGGAATGTCACTGCCTCGGGTATTTCACAAGACAGGTCACCTCTTGTGAAAGTCCGAAGTAATTCTCTGAAAGCTCCTTCCACGCATGTCACAAAACATCATTTAGCCAGAAATCATTTGTTTCTATCAAAGACCAAAGACCAGTAAATCACTTGCATCAGAACAGTCTGTTGAATCAGCAGACATGGGTAAGGACTGACAGTGCCCCCGATCAGCAAGTGGAGACTGGGAAATCCCCCTCTTTATCTGGAGCCTCTGCCAAGCCTGCCCTCAGTCGAGTGAAAACGCTGGTACTTCAGATTTAGAACTACTGTCAGTCAAAGGAATCAAGATTTAAGTTTACAAGAGGCTGAAACTGAGCAATCAGATACTTTAGATAATAAAGAAGCTGTCATCCTAAGGGAAAAAACCTCCATCTGGACGCCAGACACCGCAGCCTTTAAGGCATCAGTCTTACATCTTGGCAGTAAATGACCAGGAGACCGGGTCAGACACTACCTGCTGGCTGCCCAATGAAGCACGTCGAGAGGTCCACATAAAAAGAATGGAGGAAAAAAAGCCTCGAGTACCAGTCCGCCTGGCGATTCTTTGGCTTCCATCCCATTTATAGATGAACCAACTAGCCCTAGCATTGATCATGATATTGCACATATCCCTGCCTCTGCTGTTATATCAGCCTCTACCTCTCAGGTCCCCTCCATAGCAACAGTTCCTCCTTGCCTCACAACTTCAGCTCCATTAATTCGCCGTCAGCTCTCACATGACCACGAATCTGTTGGCCCTCCTAGCCTGGATGCTCAGCCCAACTCAAAGACAGAAAGATCAAAATCATATGATGAGGGTCTGGATGATTACAGAGAAGATGCAAAATTGTCCTTTAAGCACGTATCTAGTCTGAAGGGAATCAAGATCGCAGACAGCCAAAAGTCATCAGAAGACTCTGGGTCCAGAAAAGATTCTTCCTCAGAGGTCTTCAGTGATGCTGCCAAGGAAGGGTGGCTTCATTTCCGACCCCTTGTCACCGATAAGGGCAAGCGAGTTGGTGGAAGTATTCGGCCATGAAACAGATGTATGTTGTCCTTCGGGGTCATTCACTTTACCTGTACAAAGATAAAAGAGAGCAGACGACTCCGTCTGAGGAAGAGCAGCCCATCAGTGTTAATGCTTGCTTGATAGACATCTCTTACAGTGAGACCAAGAGGAAAAATGTGTTTCGACTCACCACGTCCGACTGTGAATGCCTGTTTCAGCTGAAGACAGAGATGATATGCTAGCTTGGATCAAGACGATCCAGGAGAGCAGCAACCTAAACGAAGAGGACACTGGAGTCACTAACAGGGATCTAATTAGTCGAAGAATAAAAGAATACAACAATCTGATGAGCAAAGCAGAACAGTTGCCAAAAACACCTCGCCAGAGTCTCAGCATCAGGCAAACTTTGCTTGGTGCTAAATCAGAGCCAAAGACTCAAAGCCCACACTCTCCGAAGGAAGAGTCGGAAAGGAAACTTCTCAGTAAAGATGATACCAGTCCCCCAAAAGACAAAGGCACATGGAGAAAAGGCATTCCAAGTATCATGAGAAAGACATTGAGAAAAAGCCAACTGCTACAGGAACTTTCGGCGTCCGACTAGATGACTGCCACACAGCTCATACTAATCGGGTAGGAGACACCAGCCCACCGGATTTCCTCAAGTCATTAATTCAGTTTGATTATAATGGGATCTGAGTATATAGCCTTTCAGACAACAGAGACTGTCAATCTGTTTTCCTTTTCATAGCAGACCTTAGTTTCCCTAAGTATTTCTGACCTGTAATGCTTTTTTTCTAATGTATTGACTCCGAAATTGAATAATTATTCAACCATTAGGAATTTGTCTGAAATGGTCTGTAAGAATTCGTCTTCAAATCGTGTGTTTCTGCTTTTAGCATTTTAAAACAAGGATGAGAACAAGGACCTGATTAAGAAAGTATAATACATGTAAATGTATGTGCATATATTTAAAACACCCATGCTAGGATTCGTATCATGAATTGATATTACTCTCTCCTCCTCTTTTCTTGACTCTTTATTCAGCGGAACGGTTTCCACATTCTCTTTACCTGTTGTTACTTTCCTTTTTAGAATGTTATCTCTCTGGGGGTCCCTCTCTTTCTTTCAGTCTCTTTGTTCTCTTCTTACTGTCTCAAATATCTCTTGCAGGTTTTATCTATTCCCAGATCTATAATGTCTGTATTCTTTATATTACATAACAGCAATTTATGTTTCCTTTTGGATGAAAGGGGCATTTTTGCTGTGATATACAACTACTAAACATTTGTGCTGCATTAAATAAAATGTTTATTTCTTGTTTTGCAGTATATTCCATTAATAGTTGACATATGTTGCAAATTAGTTGAAGAAAGAGGTCTTGAATATACAGGTATTTATAGAGTTCCTGGAAATAATGCAGCCATCTCAAGTATGCAAGAAGAACTCAACAAGGGAATGGCTGATATTGATATACAAGATGATGTAAGTTTGCTTATTTGAATAACTGATCCTTTTTTTTCCCCCTTTGGTGGAACTGGATATGAAAATACTATATTTCTATTTTGTACACCTAGAAATGGCGAGATTTGAATGTGATAAGCAGTTTACTAAAATCCTTCTTCAGAAAACTCCCTGAGCCTCTCTTCACAAATGGTGAGTTAACTCCCGTGAAAGATACCAGATGAAATGGTTCAAGTTACAATTGGAAAACCATAGAATATTAAATTGAACAAGGACAAAATGTCTTGGTCAAAGGAAGCAGGAGGCTTTATTTAGTTCTCCCTCATATATTAAAAACATAAAAGTTATTTAGGTTCAGTGAAATATGTATTATCTTGTTCATACATGTTTGCAGCCAAATTAATATTATTGTTTCCAGTCAAATGGCTTCTGACATCATAAGGTACAATGAGTAGAAAAATGTTTTTTCAGTCAAGCCAAGTATTTAAGTGCCATGTAAGACACTTTACTAGATGTTGTTGGAGGGTGGGGGAGGAATGGACAGGCTGTGTAAATATAGGATGGTTCCTGCAGGGAACTTACATTTTAGAAATTTACATTTCAAAACTATTAGAACTCTTTCCTATGTTGTGGTTTAAAATTGATCCTTAAAGGGAAACTAGATTACAATTCACCTAGGCAATTTAAGATAAATTTGTTTTATTGTTCTTGTCGTCAGATAAATATGCTGATTTTATTGAAGCCAATCGTAAAGAAGATCCTCTAGATCGTCTGAAAACATTAAAAAGACTACCTCTGAATCCATTGGAAAATAATCTGTTTCAGATTCACGATTTGCCTGAACATCATTATGAAACACTTAAGTTCCTTTCAGCTCATCTGAAGACAGTGGCAGAAAATTCAGAAAAAAATAAGATGGAACCAAGAAACCTAGCAATAGTGTTTGGTCCCACCCTTGTTCGAACATCAGAAGACAACATGACCCACATGGTCACCCACATGCCTGACCAGTACAAGATTGTAGAAACGCTCATCCAGCACGTAAGTTCATGCTTCATCTCTGTAAGTTCATGCTTCATCTCTGCAAGAAAATTCATTTTCACGGGCAGCCGCTATTTGGTCAGACAGAGGTTGGTTGTAATATCTTTCCCTAAGAAAATTACCCTTTTTCTATACTATCCTCCAAGATCTCAGTATATTTAAAGGCTTGTTTAATTTCTCTTCTCACCTTTTTTAAATTTTAGCATGACTGGTTTTTCACAGAAGAAGGTGCTGAAGAGCCTCTTGTAAGTATTGTCTGTCAGCATTTGTACTCAGTAGTTTCATTTGGGACACAAGATCCTGGCGCGCCAACAATGTCAACTTCCTGCTTTGCTATTGTCCGCTTTGCGCCCCGGAAGCAGGTCTCTAGCTCAGTTTCTGATCTAATGAATATACAAGTACGGTGCTTATTTGCAGTTAATTATGCGTAAACAATGTAAACACATTAAGCACAGGTGCTTTACTTAGTAATGTGTCTTTTACTAAATGTTGTTTAAATTTTAAAGAAAGTATCTTTGAAGAGATGATGAAGAGATCTTTGTTTATTAACCATAGACAACAGTGCAGGAGGAAAGCACAGTAGACTCCCAGCCAGTGCCAAACATAGATCATTTACTCACCAACATTGGAAGGACAGGAGTCTCCCCAGGAGATGTATCAGGTAACTCTTGCCTGGGCAGTCTTGACCTCTAGGCTGAAAGCTACATTCTTACAATATGAAAGAGCAAATCAATCATAGTGAATTGTTACTTATGATTTTTTCTTTTTCTCTTCCTTTCTACTAATAAAAAACCTTAATCTTCCTTTTCCAATTGATCTGAATTATCTTCCAGTGACTCTAATGCCATTGGCAGTGCATGCAGTTGTAATGTTTGTCAGAATGGAACTATGAGGGAAATGAGCATGCAAACACTGTTTTGTTCTTTTTTTTTTTTTTTTTTTTTAATTCACAGTTTCCATGTAATAGTCATCACAAGGTAAAAACAGATATATGCTACTGAGTATGTGGTTGCTGTGATGGCAGAAAGTATGATCTGGGCTGTATAAGTAGTTCTTATTCTTGAGCCAGGAGTTCTGTTTAAAAGCAGCAAGTTAAATCTGTTGAACTGGTAATGGGCACCATTTTCATAAATACATTTTCATAAATACAGTGTATTATTTGTCACAGTAAAAAGCCAGCCTATTTGACATTTATTTTCTTCTGTTTCCTGTTGCCACCCTAATGCTTGGTTAAGTATTAGTTCTTCTAGGCTCTTTTGATGAAAACTTTCTCCTGCCAAACTGTTGCACTAATCTAGCATGTTGTTTTACACAATGTTCTCCCTTTGTCTCTAGTTCTTGTTTTAGTCCTAAAGGGTTTTTTCAGCTCTTACTGACACAGGCAAATCTATACTGATGTTGAACAGGCGAAGTGGGAGGAGTCTATCACACGGTAATGTCACTAGTGGATTCTGTGATGTCCCTGATGGACAGCTGGAACTGTAGGAAGAAGGAGGACTGTTGTCCACACTGTAGCTGCCTTGTCTGCAGAAACCCCCGATTCTTGTAAATGCAAACATAGTTGATCTGTGGTGTAAAGTTTCTCATAAGATTATTGTAAACAGATCAATACTACTTTCTTAAAAGTTTTTCTGCTGTTTCTTGTTATTTCTGAAGCAGACCCTGAGAGAAATAGCATGGTATGGTCTACCAGTTCTTAAAGTCATAAAGCATTTAGCCATGTGTTAAAAGGGGCGTGGCATGGGGCTCAGCTCATTAATTCTGAAAACCAATTTCCCTAATGTTGAAAGATGAAACTTCAAAATTGGTATTATCCTGAATATTGCTAGCCCCTTCCTACCCTCTTTATAATTGTATAATCTGAGTTTTGCCAGACAGTAAAATTATGGTCTCCATTTTTCCATTTCCATAACAGCATTTGTTAATAGATAATTGCAAAACTGGTAGCAATTTAACCAAACTAGTCAAAAGGATCCCTCAACTGCACTGCTATGGAACTGGGGTCTGAAGCACAAAGATAAACATTATTAATGTAAAACCAAAGTGACCTGGAAGCAAGATTATCTTAATGCCTCTTTTGCATCCATACGCATACAGCATAATGCTCAGAAAATTTAAGTCTGACAAAAATCAACATAAACATGCCAGTATGAGTGTCTCAATTGTAGCTAGGGCGGCCAACACTCTTCAAAGTTCTACATTGTGTATCAGTCTCAGATACAGGATGTGGTACATTAAAAAAGAAAATTATTACACTGTCCTGAAGCTTCTTTATTGCTAGATTTAATATTTAGAAAGTCTAATAAACACGAGTGTTTCTGTTTTTGTTTAGCACAGGGCTCCTTTGCCATTTCTATCATTGAGCTGGTTCTGCCTACAATTCACAGCATCCTTTCATGGCGGTGGCTTTCTGTGGTGCAGCTTGCATCTTTGTGAGCTCTGACTATCCACTGTGTTCTATTGTTTTGAGTTTTGCTTTCACATTTTGTTCTGTGCCTGTCTTTCCATAAGTTTTGCATTGTTTGTGGAAAGCAGTAAAGATTGGCTAATACTGACCATGTTTTATTTAATTTTTCACAGATTCAGCTACTAGTGACTCAACAAAATCTAAGGCTCAGGTGATCCTCTGACCTCGGCCTCCCAAGTAGCCAGGACCACAGGGTTCTTGGGGATCTGGAAAGGATCAGTATAGCAGGGAACTGCTTGTGTCCTCCATCTTTGCAGCTGCTAGTCGCAAGAGGAAGAAGCCGAAAGAAAAAGCACAGCCTAGCAGCTCAGAAGATGAACTGGACAATGTATTTTTTAAGAAAGAAAATGTGGAACAGTGTCACAATGATACTAAAGAGGAGTCCAAAAAAGAAAGTGAGACACTGGGCAGAAAACAGAAGATCATCATTGCCAAAGAAAACAGCACTAGGAAAGACCCCAGCACGAAAAAGATGAAAAGATATCACTAGGAAAAGAGAGCACGCCTTCTGAAAACCCTCACCACCACACAACTCAAAACACAACAAGTCACCAACTCTCAGCTGTCGCTTTGCCATCCTGAAAGAGAGCCCCAGGTCACTTCTGGCACAGAAGTCCTCCCACCTTGAAGAGACAGGCTCTGACTCTGGCACTTTGCTCAGCACGTCTTCCCAGGCCTCCCTGGCAAGGTTTTCCATGAAGAAATCAACCAGTCCAGAAACGAAACATAGCGAGTTTTTGGCCAACGTCAGCACCATCACCTCAGATTATTCCACCACATCGTCTGCTACATACTTGACTAGCCTGGACTCCAGTCGACTGAGCCCTGAGGTGCAATCCGTGGCAGAGAGCAAGGGGGACGAGGCAGATGACGAGAGAAGCGAACTCATCAGTGAAGGGCGGCCTGTGGAAACCGACAGCGAGAGCGAGTTTCCCGTGTTCCCCACAGCCTTGACTTCAGAGAGGCTTTTCCGAGGAAAACTGCAAGAAGTGACTAAGAGCAGCCGGAGAAATTCTGAAGGAAGTGAATTAAGTTGCACGAGGGAAGTTTAACATCAAGTTTAGATAGCCGGAGACAGCTCTTCAGTTCCCATAAACTCATCGAATGTGATACTCTTTCCAGGAAAAAATCAGCTAGATTCAAGTCAGATAGTGGAAGTCTAGGAGATGCCAAGAATGAGAAAGAAGCACCTTCGTTAACTAAAGTGTTTGATGTTATGAAAAAAGGAAAGTCAACTGGGAGTTTACTGACACCCACCAGAGGCGAATCCGAAAAACAGGAACCCACATGGAAAACGAAAATAGCAGATCGGTTAAAACTGAGACCCAGAGCCCCTGCGGATGACATGTTTGGAGTAGGGAATCACAAAGTGAATGCCGAGACTGCTAAAAGGAAAAGCATCCGGCGCAGACATACACTAGGAGGGCACAGAGATGCTACCGAAATCAGCGTTTTGAATTTTTGGAAAGTGCATGAGCAGAGCGGGGAGAGAGAATCTGAACTTTCAGCTGTAAACCGGTTAAAACCAAAATGCTCAGCCCAGGACCTTTCCATCTCAGACTGGCTGGCCAGGGAACGCCTACGCACCAGTACCTCTGACCTTAGCAGAGGAGAAATCGGAGATCCCCAGACAGAGAACCCAAGCACACGAGAAATAGCCACGACCGACACACCTTTGTCTCTTCATTGCAACACAGGCAGTTCTTCCAGCACCTTGGCTTCAACAAACAGGCCCCTTCTTTCCATACCACCACAGTCACCTGACCAAATAAACGGAGAAAGCTTCCAGAACGTGAGCAAAAATGCTAGTTCTGCAGCGAATGCCCAACCTCATAAACTGTCTGAAACCCAGGCAGTAAAGCAGAGTTTCATCCCTGTCTTTAAACTGGGGGTATGTCCACTCTAGCAAGTAAAAAAACTACTGTTACACGTTCCAGTAACTCTGTCAATATTTTCTTGTATCAGAATTGTTATTATGCAGCCTTCATTTGGGCTGGTTTCATCATTTTGCACTGTGAAATAGCTTTACAGTGCATTACTACAGCCAGAAGAACATAATATATATATATATTTAAAAATATATCGGATAGTTGTATACAAATGAGCAAGGTATTTGTTGCAACTTACTACATAGCATATACCCAAAATCACTGAAGAAAATCGCTGGCATCAGTGTGCAGCAAATTTGTTCTTTTGGTTTCATCACTAACAAAGTGCCTCATCATAAAAATACAGTTGGTTTTTAGGGTGCCATATTGTTAAAATTAGATAACTTACTTACATTGAATAAACGAATGCGTTTTATTGGTAACAGATATCATTACATTTACCAGTTTTAACACAGGTGGATACAGAACTTCCATTCTTTAGTCATTCCAGGTGGATCTGAGTTTTATATTCAAACTTTTAATACAGTTTTTGAGTTTTGTGTGACTTGAATTTTTAATCTTTCTGTAAATACGTAACTTAAATGAACATATTAAATGTGTATCTTTCTTCAGATACCAGATTTGATATAATGTTGTAACATAGGTGTGTAGATAGTGGATCCTGGATGGAACTGGCTTCTTTATCGAGAAGAATATAATTCTGCATGAGGACTTAATGAATCCAAACCTGTGTCATGCCTGTGTGCATACCCAATTAAACACTGGAAATAAAAATTGTTTTGGC";

    let window_size = 5;
    let k= 3;
    let now = Instant::now();
    let minimizers = generate_sorted_fastq_new_version::get_kmer_minimizers_efficient(input, k, window_size);
    let elapsed = now.elapsed();
    println!("Elapsed: {:.2?}", elapsed);
    //println!("Generated Minimizers: {:?}", minimizers);
    let now = Instant::now();
    let minimizers_ineff = generate_sorted_fastq_new_version::get_kmer_minimizers(input, k, window_size);
    let elapsed = now.elapsed();
    println!("Elapsed: {:.2?}", elapsed);
    //println!("Generated Minimizers ineff: {:?}", minimizers_ineff);
    let a = generate_sorted_fastq_new_version::Minimizer { sequence: "AGC".to_string(), position: 24 };
    let b = generate_sorted_fastq_new_version::Minimizer { sequence: "AGC".to_string(), position: 24 };
    assert_eq!(minimizers_ineff, minimizers)

}
fn get_sorted_entries(mini_map_filtered: HashMap<i32, Vec<generate_sorted_fastq_new_version::Minimizer>>)->Vec<(i32, Vec<generate_sorted_fastq_new_version::Minimizer>)>{
    // Sort by the length of vectors in descending order
    let mut sorted_entries: Vec<(i32, Vec<generate_sorted_fastq_new_version::Minimizer>)> = mini_map_filtered
        .into_iter()
        .collect();

    sorted_entries.sort_by_key(|(_, v)| std::cmp::Reverse(v.len()));

    sorted_entries
}

fn main() {
    let args: Vec<String> = env::args().collect();
    //let fasta_path = &args[1];
    let fastq_path = &args[1];
    let k=9;
    let window_size = 18;

    //let fasta_file = File::open(fasta_path).unwrap();
    //let fasta_records = FileActions::parse_fasta(fasta_file).unwrap();
    let fastq_file = File::open(fastq_path).unwrap();
    let fastq_records = file_actions::parse_fastq(fastq_file).unwrap();
    //test_minimizer_gens();
    //let mut mini_map: HashMap<i32, Vec<generate_sorted_fastq_new_version::Minimizer>> = HashMap::with_capacity(fastq_records.len());
    let mut mini_map_filtered: HashMap<i32, Vec<generate_sorted_fastq_new_version::Minimizer>> = HashMap::with_capacity(fastq_records.len());

    //let mut idmap: HashMap<&str, i32> = HashMap::with_capacity(fastq_records.len());
    //let mut iterator=fastq_records.iter();
    for fastq_record in fastq_records{
        let this_minimizers=generate_sorted_fastq_new_version::get_kmer_minimizers(&*fastq_record.get_sequence(), k, window_size);
        //mini_map.insert(fastq_record.internal_id, this_minimizers.clone());
        let filtered_minis = filter_minimizers_by_quality(this_minimizers,&fastq_record.sequence, &fastq_record.quality,window_size,k);
        mini_map_filtered.insert(fastq_record.internal_id,filtered_minis);
    }
    let sorted_entries = get_sorted_entries(mini_map_filtered);
    clustering::cluster_sorted_entries(sorted_entries);




    //generate_sorted_fastq_for_cluster::sort_fastq_for_cluster(15,7.0,"/home/alexanderpetri/Rust/100k_sample.fastq")
    //let seq=dna!("ACTGACTACACAT");
    //let dna_sequence = "ATCGA";
    //let reversed_complement = generate_sorted_fastq_for_cluster::reverse_complement(dna_sequence);
    //println!("Reverse complement: {}", reversed_complement);

    /*for rec in fasta_records {
        println!("{}", rec);
    }
    for rec in fastq_records {
        println!("{}",rec);
    }*/






    /*
    THREAD test field: here I test how to use threads in Rust to actually make it possible to run several threads in parallel

     */
    /*let handle=thread::spawn(|| {
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });
    handle.join().unwrap();
    for i in 1..5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
    let threads: Vec<_> = (0..500)
        .map(|i| {
            thread::spawn(move || {
                println!("Thread #{} started!",i);
                thread::sleep(Duration::from_millis(5000));
                println!("Thread #{} finished!",i);
            })
        })
        .collect();

    for handle in threads {
        handle.join().unwrap();
    }*/

}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_reverse_complement() {
        let rev_comp = generate_sorted_fastq_for_cluster::reverse_complement("GGGGATCATCAGGGCTA");
        assert_eq!(rev_comp,"TAGCCCTGATGATCCCC");
        let rev_comp2 = generate_sorted_fastq_for_cluster::reverse_complement("ATCGA");
        assert_eq!(rev_comp2,"TCGAT");
    }
    
}